typedef enum{
    ALGORITMO, FIN_ALGORITMO, LEER, ESCRIBIR, PESOS, BARRA, CORCHETE_IZQ, CORCHETE_DER,
    FLECHA, IGUAL, SI, FIN_SI, CERO, VARIABLE, SUMA, RESTA, FDT,
    IDENTIFICADOR, CONST_NUMERICA, CONST_CADENA
} TOKEN;

void Match(TOKEN t){
    if( t != ProximoToken() ) ErrorSintactico();
}

TOKEN ProximoToken(){
    TOKEN tokenActual = Scanner();
    /*
    *
    */
    return tokenActual;
}

TOKEN Scanner(){

}

void ErrorSintactico(){
    printf("\n Error Sintactico")
}

void Objetivo(){
    Programa();
    Match(FDT);
}

void Programa(){
    Match(ALGORITMO);
    Match(PESOS);
    Sentencias();
    Match(PESOS);
    Match(FIN_ALGORITMO);
}

void Sentencias(){
    Sentencia();
    while(1){
        switch(ProximoToken()){
            case VARIABLE:
            case LEER:
            case ESCRIBIR:
            case SI:
            case IDENTIFICADOR:
                Sentencia();
            default:
                return;
        }
    }
}

void Sentencia(){
    Oracion();
    Match(BARRA);
}

void Oracion(){
    switch(ProximoToken()){
        case VARIABLE:
            Declaracion();
        case LEER:
            Lectura();
        case ESCRIBIR:
            Escritura();
        case SI:
            Condicional();
        case CORCHETE_IZQ:
            Operacion();

        default: break;
    }
}

void Declaracion(){
    Match(VARIABLE);
    Identificador();
    Match(IGUAL);
    Asignacion();
}

void Asignacion(){
    TOKEN t = ProximoToken();
    if(t == CONST_NUMERICA || t == CONST_CADENA){
        Match(t);
    }
    //Error Sintac tambien
}

void Lectura(){
    Match(LEER);
    Match(FLECHA);
    Identificador();
}

void Escritura(){
    Resultado();
    Match(FLECHA);
    Match(ESCRIBIR);
}

void Resultado(){
    TOKEN t = ProximoToken();
    if(t == IDENTIFICADOR){
        Match(t);
    }else if(t == CORCHETE_IZQ){
        Operacion();
    }
    //En Micro tira lo de erro sintactico
}

void Condicional(){
    Match(SI);
    Match(CORCHETE_IZQ);
    Condicion();
    Match(CORCHETE_DER);
    Match(PESOS);
    Sentencias();
    Match(PESOS);
    Match(FIN_SI);
}

void Operacion(){
    Match(CORCHETE_IZQ);
    Match(IDENTIFICADOR)
    Operador();
    Match(IDENTIFICADOR);
    Match(CORCHETE_DER);
}

void Operador(){

    TOKEN t = ProximoToken();
    if(t == SUMA || t == RESTA){
        Match(t);
    }
    //En Micro aca hace un else con Error Sintactico
}


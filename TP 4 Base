typedef enum{
    ALGORITMO, FIN_ALGORITMO, LEER, ESCRIBIR, PESOS, BARRA, CORCHETE_IZQ, CORCHETE_DER,
    FLECHA, IGUAL, SI, FIN_SI, CERO, VARIABLE, SUMA, RESTA, FDT,
    IDENTIFICADOR, CONST_NUMERICA, CONST_CADENA
} TOKEN;

void Match(TOKEN t){
    if( t != ProximoToken() ) ErrorSintactico();
}

TOKEN ProximoToken(){
    TOKEN tokenActual = Scanner();
    /*
    *
    */
    return tokenActual;
}

TOKEN Scanner(){
	int tabla[NUMESTADOS][NUMCOLS] = {
//   L D + - ] ] / $  >  =   0  fdt sp otro
 	{ 1, 3, 5, 6, 7, 8, 9, 10,11,12,13,14,0,15},
	{ 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{ 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	{15,15,15,15,15,15,15,15,15,15,15,15,15,15},
	}
	int car;
	int col;
	//acomodar a nuestro modelo 
	int estado = 0;
	int i = 0;
	do {
 		car = fgetc(in);
 		col = columna(car);
 		estado = tabla[estado][col];
 		if ( col != 11 ) { //si es espacio no lo agrega al buffer
 			buffer[i] = car;
 			i++;
 		}
	}while ( !estadoFinal(estado) && !(estado == 14) );
	
		buffer[i] = '\0'; //complete la cadena
		switch ( estado ){
 				case 2 :
				 	if ( col != 11 ){ //si el carácter espureo no es blanco…
 						ungetc(car, in); // lo retorna al flujo
 						buffer[i-1] = '\0';
 				}
 				return ID;
 			case 4 :
			  	if( col != 11 ) {
 					ungetc(car, in);
 					buffer[i-1] = '\0';
 				}
 				return CONSTANTE;
 			case 5 : return SUMA;
 			case 6 : return RESTA;
 			case 7 : return PARENIZQUIERDO;
 			case 8 : return PARENDERECHO;
 			case 9 : return COMA;
  			case 10 : return PUNTOYCOMA;
  			case 12 : return ASIGNACION;
  			case 13 : return FDT;
  			case 14 : return ERRORLEXICO;
 		}
  return 0;
}


void ErrorSintactico(){
    printf("\n Error Sintactico")
}

void Objetivo(){
    Programa();
    Match(FDT);
}

void Programa(){
    Match(ALGORITMO);
    Match(PESOS);
    Sentencias();
    Match(PESOS);
    Match(FIN_ALGORITMO);
}

void Sentencias(){
    Sentencia();
    while(1){
        switch(ProximoToken()){
            case VARIABLE:
            case LEER:
            case ESCRIBIR:
            case SI:
            case IDENTIFICADOR:
                Sentencia();
            default:
                return;
        }
    }
}

void Sentencia(){
    Oracion();
    Match(BARRA);
}

void Oracion(){
    switch(ProximoToken()){
        case VARIABLE:
            Declaracion();
        case LEER:
            Lectura();
        case ESCRIBIR:
            Escritura();
        case SI:
            Condicional();
        case CORCHETE_IZQ:
            Operacion();

        default: break;
    }
}

void Declaracion(){
    Match(VARIABLE);
    Identificador();
    Match(IGUAL);
    Asignacion();
}

void Asignacion(){
    TOKEN t = ProximoToken();
    if(t == CONST_NUMERICA || t == CONST_CADENA){
        Match(t);
    }
    //Error Sintac tambien
}

void Lectura(){
    Match(LEER);
    Match(FLECHA);
    Identificador();
}

void Escritura(){
    Resultado();
    Match(FLECHA);
    Match(ESCRIBIR);
}

void Resultado(){
    TOKEN t = ProximoToken();
    if(t == IDENTIFICADOR){
        Match(t);
    }else if(t == CORCHETE_IZQ){
        Operacion();
    }
    //En Micro tira lo de erro sintactico
}

void Condicional(){
    Match(SI);
    Match(CORCHETE_IZQ);
    Condicion();
    Match(CORCHETE_DER);
    Match(PESOS);
    Sentencias();
    Match(PESOS);
    Match(FIN_SI);
}

void Operacion(){
    Match(CORCHETE_IZQ);
    Match(IDENTIFICADOR)
    Operador();
    Match(IDENTIFICADOR);
    Match(CORCHETE_DER);
}

void Operador(){

    TOKEN t = ProximoToken();
    if(t == SUMA || t == RESTA){
        Match(t);
    }
    //En Micro aca hace un else con Error Sintactico
}

